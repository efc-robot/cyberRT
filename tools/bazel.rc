# +------------------------------------------------------------+
# | Startup Options                                            |
# +------------------------------------------------------------+
startup --batch_cpu_scheduling
startup --host_jvm_args="-XX:-UseParallelGC"

# +------------------------------------------------------------+
# | Common Options                                             |
# +------------------------------------------------------------+
# Force bazel output to use colors (good for jenkins) and print useful errors.
common --color=yes

# +------------------------------------------------------------+
# | Build Configurations                                       |
# +------------------------------------------------------------+
# Make Bazel print out all options from rc files.
# build --announce_rc
build --show_timestamps

# Work around the sandbox issue.
build --spawn_strategy=standalone

build --action_env=CYBER_PATH

# Enable colorful output of GCC
build --cxxopt="-fdiagnostics-color=always"

build --copt="-Werror=sign-compare"
build --copt="-Werror=return-type"
build --copt="-Werror=unused-variable"
build --copt="-Werror=unused-but-set-variable"
build --copt="-Werror=switch"
build --cxxopt="-Werror=reorder"

build --define=use_fast_cpp_protos=true

# Build Apollo with C++ 17 features.
build:c++17 --cxxopt=-std=c++1z
# build:c++17 --cxxopt=-stdlib=libc++
build:c++1z --config=c++17

# Enable C++14 (aka c++1y) by default
build --cxxopt="-std=c++14"
build --host_cxxopt="-std=c++14"

# test --test_env=PYTHONPATH
# +------------------------------------------------------------+
# | CPP Lint Tests & Unit Tests                                |
# +------------------------------------------------------------+
# By default, cpplint tests are run as part of `bazel test` alongside all of
# the other compilation and test targets.  This is a convenience shortcut to
# only do the cpplint testing and nothing else.
# Do bazel test --config=cpplint <target> to enable this configuration.
# To enable the lint test, the BUILD *must* load the cpplint.bzl by having
# 'load("//tools:cpplint.bzl", "cpplint")' at the beginning and 'cpplint()'
# at the end.
test:cpplint --test_tag_filters=cpplint
test:cpplint --build_tests_only
test:cpplint --flaky_test_attempts=1
# Regular unit tests.
test:unit_test --test_tag_filters=-cpplint


# Coverage tests
coverage --javabase="@bazel_tools//tools/jdk:remote_jdk11"
coverage --test_tag_filters=-cpplint
